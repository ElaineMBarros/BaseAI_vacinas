import os
try:
    import streamlit as st
    STREAMLIT_AVAILABLE = True
except ImportError:
    STREAMLIT_AVAILABLE = False
    st = None

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain
from sqlalchemy import create_engine

class VaciVidaAI:
    """
    Agente AI para consultas no banco de dados VaciVida
    """
    
    def __init__(self):
        # Carrega as vari√°veis de ambiente
        load_dotenv()
        
        # Verifica se a chave da OpenAI est√° definida (local ou Streamlit Cloud)
        api_key = None
        
        # Primeiro tenta pegar do .env (para local)
        api_key = os.getenv("OPENAI_API_KEY")
        
        # Se n√£o encontrou e o Streamlit est√° dispon√≠vel, tenta os secrets
        if not api_key and STREAMLIT_AVAILABLE and hasattr(st, 'secrets') and 'OPENAI_API_KEY' in st.secrets:
            api_key = st.secrets["OPENAI_API_KEY"]
        
        if not api_key:
            raise ValueError("A vari√°vel de ambiente OPENAI_API_KEY n√£o est√° definida.")
        
        os.environ["OPENAI_API_KEY"] = api_key
        
        # Configura√ß√£o do banco de dados
        self.engine = create_engine("sqlite:///vacivida.db")
        self.db = SQLDatabase(
            self.engine, 
            sample_rows_in_table_info=3, 
            max_string_length=300, 
            include_tables=["vcvd_dose", "vcvd_evento_adverso"]
        )
        
        # Configura√ß√£o do modelo OpenAI
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo-16k", 
            temperature=0,
            max_tokens=1000
        )
        
        # Cria√ß√£o do chain SQL
        self.db_chain = SQLDatabaseChain.from_llm(
            llm=self.llm, 
            db=self.db, 
            verbose=False,  # Desabilitamos verbose para a interface web
            return_intermediate_steps=True
        )
    
    def _validar_sql(self, sql: str) -> str:
        """
        Valida e corrige a SQL gerada para usar apenas tabelas v√°lidas
        """
        if not sql:
            return sql
        
        # Substitui nomes incorretos de tabelas
        sql_corrigida = sql
        
        # Padr√µes comuns de nomes incorretos que o LLM pode gerar
        padroes_incorretos = [
            (r'"?Tabela com doses de vacinas"?', "vcvd_dose"),
            (r'"?tabela_doses"?', "vcvd_dose"),
            (r'"?doses"?', "vcvd_dose"),
            (r'"?vacinas"?', "vcvd_dose"),
            (r'"?Tabela com eventos adversos"?', "vcvd_evento_adverso"),
            (r'"?eventos_adversos"?', "vcvd_evento_adverso"),
            (r'"?eventos"?', "vcvd_evento_adverso"),
        ]
        
        import re
        for padrao, tabela_correta in padroes_incorretos:
            sql_corrigida = re.sub(padrao, tabela_correta, sql_corrigida, flags=re.IGNORECASE)
        
        return sql_corrigida

    def _limpar_sql(self, sql: str) -> str:
        """
        Limpa e corrige a SQL gerada para evitar problemas com m√∫ltiplas instru√ß√µes
        """
        if not sql:
            return sql
            
        # Remove pontos-e-v√≠rgulas extras que podem causar m√∫ltiplas instru√ß√µes
        sql = sql.strip()
        
        # Se termina com ponto-e-v√≠rgula, remove
        if sql.endswith(';'):
            sql = sql[:-1]
        
        # Se h√° m√∫ltiplos pontos-e-v√≠rgula, pega apenas a primeira instru√ß√£o
        if ';' in sql:
            sql = sql.split(';')[0].strip()
        
        return sql

    def consultar(self, pergunta: str) -> dict:
        """
        Realiza uma consulta no banco de dados
        
        Args:
            pergunta (str): Pergunta em linguagem natural
            
        Returns:
            dict: Resultado da consulta com SQL gerada e resposta
        """
        try:
            # Melhorar o prompt para ser mais espec√≠fico sobre as tabelas
            pergunta_melhorada = f"""
            Use APENAS as tabelas 'vcvd_dose' e 'vcvd_evento_adverso' que existem no banco.
            NUNCA invente nomes de tabelas.
            
            Pergunta: {pergunta}
            
            Tabelas dispon√≠veis:
            - vcvd_dose: cont√©m informa√ß√µes sobre doses de vacinas aplicadas
            - vcvd_evento_adverso: cont√©m informa√ß√µes sobre eventos adversos registrados
            """
            
            resultado = self.db_chain.invoke({"query": pergunta_melhorada})
            
            # Extrair informa√ß√µes do resultado
            resposta = resultado.get("result", "N√£o foi poss√≠vel obter resposta")
            
            # Tentar extrair o SQL das etapas intermedi√°rias
            sql_query = "N√£o dispon√≠vel"
            if "intermediate_steps" in resultado:
                for step in resultado["intermediate_steps"]:
                    if isinstance(step, dict) and "sql_cmd" in step:
                        sql_query = step["sql_cmd"]
                        break
            
            # Limpar e validar a SQL gerada
            if sql_query != "N√£o dispon√≠vel":
                sql_query = self._limpar_sql(sql_query)
                sql_query = self._validar_sql(sql_query)
            
            return {
                "sucesso": True,
                "pergunta": pergunta,
                "sql_gerada": sql_query,
                "resposta": resposta,
                "erro": None
            }
            
        except Exception as e:
            erro_str = str(e)
            
            # Se o erro for relacionado a m√∫ltiplas instru√ß√µes, tenta novamente com fallback
            if "multiple statements" in erro_str.lower() or "You can only execute one statement at a time" in erro_str:
                try:
                    # Tenta uma abordagem mais simples
                    pergunta_simplificada = f"Responda de forma direta e concisa: {pergunta}. Use apenas uma instru√ß√£o SQL simples."
                    resultado_fallback = self.db_chain.invoke({"query": pergunta_simplificada})
                    
                    resposta = resultado_fallback.get("result", "N√£o foi poss√≠vel obter resposta")
                    sql_query = "N√£o dispon√≠vel"
                    
                    if "intermediate_steps" in resultado_fallback:
                        for step in resultado_fallback["intermediate_steps"]:
                            if isinstance(step, dict) and "sql_cmd" in step:
                                sql_query = self._limpar_sql(step["sql_cmd"])
                                break
                    
                    return {
                        "sucesso": True,
                        "pergunta": pergunta,
                        "sql_gerada": sql_query,
                        "resposta": resposta,
                        "erro": f"Resolvido automaticamente (erro original: m√∫ltiplas instru√ß√µes SQL)"
                    }
                    
                except Exception as e2:
                    return {
                        "sucesso": False,
                        "pergunta": pergunta,
                        "sql_gerada": None,
                        "resposta": None,
                        "erro": f"Erro original: {erro_str}. Erro no fallback: {str(e2)}"
                    }
            
            return {
                "sucesso": False,
                "pergunta": pergunta,
                "sql_gerada": None,
                "resposta": None,
                "erro": erro_str
            }
    
    def get_schema_info(self) -> str:
        """
        Retorna informa√ß√µes sobre o esquema do banco de dados
        """
        try:
            return self.db.get_table_info()
        except Exception as e:
            return f"Erro ao obter informa√ß√µes do schema: {e}"
    
    def get_exemplos_perguntas(self) -> list:
        """
        Retorna exemplos de perguntas que podem ser feitas
        """
        return [
            "Quantas doses foram aplicadas ao todo?",
            "Quantas doses por laborat√≥rio?",
            "Quantos eventos adversos foram registrados?",
            "Quantos eventos adversos por sexo?",
            "Qual laborat√≥rio aplicou mais doses?",
            "Quantas doses foram aplicadas por m√™s?",
            "Qual a distribui√ß√£o de doses por faixa et√°ria?",
            "Quantos eventos adversos graves foram registrados?",
            "Qual a m√©dia de idade dos pacientes vacinados?",
            "Quantas primeiras doses vs doses de refor√ßo?"
        ]

# Teste b√°sico
if __name__ == "__main__":
    try:
        agente = VaciVidaAI()
        print("‚úÖ Agente VaciVida AI inicializado com sucesso!")
        
        # Teste b√°sico
        resultado = agente.consultar("Quantas doses foram aplicadas?")
        if resultado["sucesso"]:
            print(f"ü§ñ Resposta: {resultado['resposta']}")
        else:
            print(f"‚ùå Erro: {resultado['erro']}")
            
    except Exception as e:
        print(f"‚ùå Erro ao inicializar o agente: {e}")
